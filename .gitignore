# Predefined Wordlists and directories
SecLists-master/
config.json
ml_model.pth
*.code-workspace
.gitattributes
rockyou*
trainingdata/
clusters/*
src/models/embedding/*
src/models/transformer/*
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
.uv-venv
env/
venv/
ENV/
env.bak/
venv.bak/

# uv
.python-version

# Virtual environments
.uv-cache/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/

# Security Research Specific
# Training data - potentially sensitive password datasets
trainingdata/
!trainingdata/.gitkeep
!trainingdata/README.md

# ML model artifacts and checkpoints  
*.pth
*.pt
*.ckpt
*.onnx
*.tflite
*.h5
*.weights
*.model
*.safetensors

# Research outputs and processed data
clusters/
!clusters/.gitkeep
artifacts/
output/
results/
temp/
cache/

# Performance and profiling data
*.prof
*.nvprof
*.qdrep
*.trace

# Large files and logs specific to password research
*.log
*.hdf5
*.parquet
*.feather
*.bin
*.tmp
*.cache

# Jupyter notebook checkpoints (for research notebooks)
.ipynb_checkpoints

# IDE and editor files
.vscode/*
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/extensions.json
!.vscode/copilot-instructions.md

# Local development environment
.env
.venv/
env/
venv/
ENV/
.uv/
.uv-venv/
.uv-cache/
.python-version
.copilot/
.github/
.vscode/
.vs/
src/models/*/*
!src/models/*/*.py

# UV specific
uv.log
.uv-lock
.uv-cache/

# Security sensitive data - NEVER commit these!
*.key
*.pem
*.crt
*.cert
*.password
*.token
*.secret
credentials.json
secrets.json
auth_config.json

# Password research data - potentially sensitive!
trainingdata/*
!trainingdata/.gitkeep
!trainingdata/README.md
wordlists/
password_lists/
hashes/
rainbow_tables/
breach_data/
real_passwords/

# ML model artifacts and checkpoints
models/*/*/*.pth
models/*/*/*.pt
models/*/*/*.ckpt
models/*.bin
*.pth
*.pt
*.ckpt
*.onnx
*.tflite
*.h5
*.weights
*.model
*.safetensors
*.pb
checkpoint*/

# Intermediate data processing
clusters/
!clusters/.gitkeep
processed_data/
embeddings/
vectors/

# Research outputs
artifacts/
output/
results/
temp/
cache/
logs/
runs/
metrics/
evaluation/

# Performance profiling and GPU data
*.prof
*.nvprof
*.qdrep
*.nsys-rep
*.trace
*.svg
*.stats

# Development artifacts
*.swp
*.bak
*~
.DS_Store
Thumbs.db
.coverage
coverage.xml
htmlcov/
.hypothesis/
.pytest_cache/
nosetests.xml
.nox/
.tox/
.hypothesis/
.coverage
.coverage.*

# IDE specific files
.idea/
.vscode/*
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json
!.vscode/copilot-instructions.md
*.code-workspace
*.sublime-workspace
*.sublime-project

# Documentation build artifacts
docs/_build/
docs/api/
docs/auto_examples/
docs/_generated/
site/

# Editor buffers and backups
*#
#*#

# Temporary files
*.tmp
*.temp
*.bak
*.backup
*.old
*.log
*.out

# Large data files
*.csv
*.tsv
*.parquet
*.hdf5
*.h5
*.feather
*.arrow
*.avro
*.db
*.sqlite
*.sqlite3
*.ldb
*.zip
*.gz
*.tar
*.tgz
*.rar
*.7z
*.bin
*.dat
*.npy
*.npz

# OS specific
.DS_Store
Thumbs.db
desktop.ini
*.lnk
